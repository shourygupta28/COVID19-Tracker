{"version":3,"sources":["components/InfoBox.js","components/LineGraph.js","util.js","components/Map.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","active","isRed","total","props","console","log","Card","onClick","className","CardContent","Typography","colrs","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","casesType","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","fetchData","length","datasets","borderColor","backgroundColor","casesTypeColors","hex","multiplier","recovered","deaths","sortData","sort","b","prettyPrintStat","stat","showDataOnMap","map","country","Circle","center","countryInfo","lat","long","color","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d94dfe30.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport './InfoBox.css'\n\nfunction InfoBox({ title, cases, active, isRed, total, ...props }) {\n    console.log(\"isRed: \" + isRed);\n    return (\n        <Card onClick={props.onClick} className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`}>\n            <CardContent>\n\n                <Typography className=\"infoBox__title\" colrs=\"textSecondary\">\n                    {title}\n                </Typography>\n\n                <h2 className={`infoBox__cases ${!isRed && 'infoBox--green'}`}>{cases}</h2>\n\n                <Typography className=\"infoBox__total\" colrs=\"textSecondary\">\n                    {total} Total\n                </Typography>\n\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBox\n","import React, { useEffect, useState } from 'react'\nimport { Line } from 'react-chartjs-2';\nimport numeral from \"numeral\";\n\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0.0\");\n            },\n        },\n    },\n    scales: {\n        xAxes: [\n          {\n            type: \"time\",\n            time: {\n              format: \"MM/DD/YY\",\n              tooltipFormat: \"ll\",\n            },\n          },\n        ],\n        yAxes: [\n          {\n            gridLines: {\n              display: false,\n            },\n            ticks: {\n              // Include a dollar sign in the ticks\n              callback: function (value, index, values) {\n                return numeral(value).format(\"0a\");\n              },\n            },\n          },\n        ],\n      },\n}\n\nconst buildChartData = (data, casesType='cases') => {\n    let chartData = []\n    let lastDataPoint;\n\n    for (let date in data.cases) {\n        if(lastDataPoint) {\n            let newDataPoint = {\n                x : date,\n                y: data[casesType][date] - lastDataPoint\n            };\n            chartData.push(newDataPoint);\n        }  \n        lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n};\n\n\nfunction LineGraph({ casesType='cases', ... props }) {\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n            .then(response => response.json())\n            .then(data => {\n                const chartData = buildChartData(data, casesType);\n                setData(chartData);\n            })\n        }\n\n        fetchData();\n    }, [casesType]);\n\n    return (\n        <div className={props.className}>\n            {data?.length > 0 && (\n                 <Line \n                 options={options}\n                 data={{\n                     datasets: [{ data: data,\n                                 borderColor: \"#CC1034\",\n                                 backgroundColor: \"rgba(204, 16, 52, 0.5)\"\n                              }]\n                 }} />\n            )}\n           \n        </div>\n    )\n}\n\nexport default LineGraph\n","import React from 'react'\nimport { Circle, Popup } from 'react-leaflet';\nimport numeral from 'numeral';\n\nconst casesTypeColors = {\n    cases: {\n      hex: \"#CC1034\",\n      multiplier: 400,\n    },\n    recovered: {\n      hex: \"#4CAF50\",\n      multiplier: 400,\n    },\n    deaths: {\n      hex: \"#fb4443\",\n      multiplier: 1200,\n    },\n  };\n\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n\n    return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n}\n\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n\n// DRAW circles on the map with interactive tooltip\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from 'react'\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport './Map.css';\nimport { showDataOnMap } from '../util';\n\nfunction Map({ countries, casesType, center, zoom }) {\n    //const position=[20.000, 27.000]\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n                {showDataOnMap(countries, casesType)}\n            </LeafletMap>\n        </div>\n    )\n}\nexport default Map\n","import React from 'react';\nimport './Table.css';\nimport numeral from 'numeral';\n\nfunction Table({ countries }) {\n    return (\n        <div className=\"table\">\n            {countries.map(({ country, cases }) => (\n                <tr>\n                    <dt>{country}</dt>\n                    <dt>\n                        <strong>{numeral(cases).format(\"0,0\")}</strong>\n                    </dt>\n                </tr>\n            ))}\n        </div>\n    )\n}\n\nexport default Table\n","import { Card, CardContent, FormControl, MenuItem, Select } from '@material-ui/core';\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport InfoBox from './components/InfoBox';\nimport LineGraph from './components/LineGraph';\nimport Map from './components/Map';\nimport Table from './components/Table';\nimport { prettyPrintStat, sortData } from './util';\nimport 'leaflet/dist/leaflet.css';\n\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState('cases');\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data);\n    });\n  }, []);\n\n  useEffect(() => {\n    // async -> send a request, wait for it, do something with the info\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2\n          }));\n\n          const sortedData = sortData(data)\n          setCountries(countries);\n          setTableData(sortedData);\n          setMapCountries(data);\n      })\n    };\n\n    getCountriesData();\n  }, []);\n\n  //https://disease.sh/v3/covid-19/all\n  //\"https://disease.sh/v3/covid-19/countries/India\"\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url =\n     countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n\n      countryCode === \"worldwide\"\n          ? setMapCenter([34.80746, -40.4796])\n          : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    });\n  };\n\n  console.log('🚀 Map Center: ', mapCenter);\n\n  return (\n    <div className=\"app\">\n\n      <div className=\"app__left\">\n          <div className=\"app__header\">\n            <h1>Covid 19 tracker</h1>\n\n            <FormControl className=\"app_dropdown\">\n              <Select variant=\"outlined\" value={country}\n              onChange={onCountryChange}>\n                <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                {\n                  countries.map(country => (\n                    <MenuItem value={country.value}>{country.name}</MenuItem>\n                    ))\n                }\n                \n              </Select>\n            </FormControl>\n          </div>\n\n          <div className=\"app_stats\">\n            <InfoBox \n              isRed\n              active={casesType === 'cases'}\n              onClick={e => setCasesType('cases')}\n              title=\"Coronavirus cases\" \n              cases={prettyPrintStat(countryInfo.todayCases)} \n              total={prettyPrintStat(countryInfo.cases)} \n            />\n\n            <InfoBox\n              active={casesType === 'recovered'} \n              onClick={e => setCasesType('recovered')}\n              title=\"Recovered\" \n              cases={prettyPrintStat(countryInfo.todayRecovered)} \n              total={prettyPrintStat(countryInfo.recovered)} \n            />\n\n            <InfoBox \n              isRed\n              active={casesType === 'deaths'} \n              onClick={e => setCasesType('deaths')}\n              title=\"Deaths\" \n              cases={prettyPrintStat(countryInfo.todayDeaths)} \n              total={prettyPrintStat(countryInfo.deaths)} \n            />\n          </div>\n\n          <Map \n            center={mapCenter} zoom={mapZoom}\n            casesType={casesType} countries={mapCountries} \n          />\n      </div>\n      \n      <Card className=\"app__right\">\n          <CardContent>\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n            <LineGraph className=\"app__lineGraph\" casesType={casesType}/>\n          </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}